---
import { getCollection } from "astro:content";
import BaseLayout from "../layouts/BaseLayout.astro";
import { getContentStats } from "../utils/content";

// Get minimal data for initial load
const blogPosts = await getCollection("blog");
const projects = await getCollection("projects");
const contentStats = await getContentStats();

// Get only the most recent items for hero section
const recentBlogPosts = blogPosts
  .sort((a, b) => b.data.pubDate.getTime() - a.data.pubDate.getTime())
  .slice(0, 3);

const recentProjects = projects
  .filter(p => p.data.featured)
  .slice(0, 2);

// Current focus - most recent activity
const currentActivity = recentBlogPosts[0];
---

<BaseLayout title="Home">
  <div class="integrated-layout">
    <!-- Header Integration with Profile -->
    <header class="integrated-header">
      <div class="header-content">
        <!-- Left: Profile Info -->
        <div class="profile-section">
          <img src="/avatar.jpg" alt="Jing Li Avatar" class="avatar" />
          <div class="profile-info">
            <h1>Jing Li</h1>
            <p class="bio">Building, learning, and sharing through code</p>
          </div>
        </div>
        
        <!-- Right: Stats and Actions -->
        <div class="header-actions">
          <div class="stats-row">
            <div class="stat">
              <span class="number">{contentStats.blogPosts}</span>
              <span class="label">Posts</span>
            </div>
            <div class="stat">
              <span class="number">{contentStats.projects}</span>
              <span class="label">Projects</span>
            </div>
            <div class="stat">
              <span class="number">{contentStats.snippets}</span>
              <span class="label">Snippets</span>
            </div>
          </div>
          <div class="contact-actions">
            <a href="https://github.com/jlog-dev" target="_blank" class="action-btn">
              <span class="icon">üîó</span> GitHub
            </a>
            <a href="mailto:you@example.com" class="action-btn">
              <span class="icon">‚úâÔ∏è</span> Email
            </a>
          </div>
        </div>
      </div>
    </header>

    <!-- Full Width Main Content -->
    <main class="full-width-content">

  <!-- Current Focus -->
  {currentActivity && (
    <section class="current-focus">
      <div class="focus-card">
        <div class="focus-header">
          <div class="status-indicator">
            <span class="pulse"></span>
            <span class="text">Latest</span>
          </div>
        </div>
        <h2><a href={`/blog/${currentActivity.slug}`}>{currentActivity.data.title}</a></h2>
        <p>{currentActivity.data.description}</p>
        <div class="focus-meta">
          <time>{currentActivity.data.pubDate.toLocaleDateString()}</time>
          <span class="type">Blog Post</span>
        </div>
      </div>
    </section>
  )}

  <!-- Content Sections -->
  <section class="content-sections">
    <div class="section-grid">
      <!-- Blog Section -->
      <div class="content-section">
        <div class="section-header">
          <h3>üìù Writing</h3>
          <a href="/blog" class="section-link">View all ‚Üí</a>
        </div>
        <div class="section-preview">
          {recentBlogPosts.slice(0, 2).map((post) => (
            <article class="preview-item">
              <h4><a href={`/blog/${post.slug}`}>{post.data.title}</a></h4>
              <p>{post.data.description}</p>
              <time>{post.data.pubDate.toLocaleDateString()}</time>
            </article>
          ))}
        </div>
      </div>

      <!-- Projects Section -->
      <div class="content-section">
        <div class="section-header">
          <h3>üöÄ Building</h3>
          <a href="/projects" class="section-link">View all ‚Üí</a>
        </div>
        <div class="section-preview">
          {recentProjects.map((project) => (
            <article class="preview-item">
              <h4><a href={`/projects/${project.slug}`}>{project.data.title}</a></h4>
              <p>{project.data.description}</p>
              <div class="project-status">{project.data.status}</div>
            </article>
          ))}
        </div>
      </div>

      <!-- Learning Section -->
      <div class="content-section">
        <div class="section-header">
          <h3>üí° Learning</h3>
          <a href="/til" class="section-link">View all ‚Üí</a>
        </div>
        <div class="section-preview">
          <div class="learning-placeholder">
            <p>Daily discoveries and insights</p>
            <a href="/til" class="cta-button">Explore TIL ‚Üí</a>
          </div>
        </div>
      </div>

      <!-- Tools Section -->
      <div class="content-section">
        <div class="section-header">
          <h3>‚ö° Tools</h3>
          <a href="/snippets" class="section-link">View all ‚Üí</a>
        </div>
        <div class="section-preview">
          <div class="tools-placeholder">
            <p>Code snippets and utilities</p>
            <a href="/snippets" class="cta-button">Browse snippets ‚Üí</a>
          </div>
        </div>
      </div>
    </div>
  </section>

      <!-- Interactive Activity Feed (Client-side loaded) -->
      <section class="activity-feed">
        <div class="feed-header">
          <h3>Recent Activity</h3>
          <button class="load-more" id="load-activity">Load Timeline</button>
        </div>
        <div class="feed-content" id="activity-timeline" style="display: none;">
          <!-- Content loaded via client-side script -->
        </div>
      </section>
    </main>
  </div>

  <!-- Client-side Activity Timeline Component -->
  <script>
    class ActivityTimeline extends HTMLElement {
      private loadButton: HTMLButtonElement | null;
      private timeline: HTMLElement | null;
      
      constructor() {
        super();
        this.loadButton = this.querySelector('#load-activity') as HTMLButtonElement;
        this.timeline = this.querySelector('#activity-timeline') as HTMLElement;
        
        if (this.loadButton) {
          this.loadButton.addEventListener('click', () => this.loadTimeline());
        }
      }
      
      async loadTimeline(): Promise<void> {
        if (!this.loadButton || !this.timeline) return;
        
        this.loadButton.textContent = 'Loading...';
        this.loadButton.disabled = true;
        
        try {
          // Load activity data dynamically
          await new Promise(resolve => setTimeout(resolve, 800));
          
          this.timeline.innerHTML = `
            <div class="timeline-items">
              <div class="timeline-item">
                <div class="timeline-icon">üìù</div>
                <div class="timeline-content">
                  <h4>Latest Blog Post</h4>
                  <p>Recently published thoughts on software architecture</p>
                  <time>2 days ago</time>
                </div>
              </div>
              <div class="timeline-item">
                <div class="timeline-icon">üöÄ</div>
                <div class="timeline-content">
                  <h4>Project Update</h4>
                  <p>Added new features to personal website</p>
                  <time>1 week ago</time>
                </div>
              </div>
            </div>
          `;
          
          this.timeline.style.display = 'block';
          this.loadButton.style.display = 'none';
        } catch (error) {
          this.loadButton.textContent = 'Error loading timeline';
        }
      }
    }
    
    customElements.define('activity-timeline', ActivityTimeline);
  </script>

  <style>
    /* Integrated Layout */
    .integrated-layout {
      max-width: 1400px;
      margin: 0 auto;
      padding: 0 var(--spacing-md);
    }

    /* Integrated Header */
    .integrated-header {
      background: var(--bg-card);
      border: 1px solid var(--border-primary);
      border-radius: var(--radius-lg);
      margin: var(--spacing-xl) 0 var(--spacing-2xl) 0;
      padding: var(--spacing-xl);
    }

    .header-content {
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: var(--spacing-xl);
    }

    /* Profile Section */
    .profile-section {
      display: flex;
      align-items: center;
      gap: var(--spacing-lg);
    }

    .avatar {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      object-fit: cover;
      border: 3px solid var(--border-primary);
      transition: transform var(--transition-base);
      flex-shrink: 0;
    }

    .avatar:hover {
      transform: scale(1.05);
    }

    .profile-info h1 {
      font-size: var(--font-size-2xl);
      margin: 0 0 var(--spacing-xs) 0;
      color: var(--text-primary);
      font-weight: var(--font-weight-bold);
    }

    .bio {
      font-size: var(--font-size-base);
      color: var(--text-secondary);
      margin: 0;
      line-height: var(--line-height-relaxed);
    }

    /* Header Actions */
    .header-actions {
      display: flex;
      flex-direction: column;
      align-items: flex-end;
      gap: var(--spacing-md);
    }

    .stats-row {
      display: flex;
      gap: var(--spacing-lg);
    }

    .stat {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: var(--spacing-xs);
      text-align: center;
    }

    .stat .number {
      font-size: var(--font-size-xl);
      font-weight: var(--font-weight-bold);
      color: var(--color-accent);
      line-height: 1;
    }

    .stat .label {
      font-size: var(--font-size-xs);
      color: var(--text-secondary);
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .contact-actions {
      display: flex;
      gap: var(--spacing-sm);
    }

    .action-btn {
      display: flex;
      align-items: center;
      gap: var(--spacing-xs);
      padding: var(--spacing-sm) var(--spacing-md);
      background: var(--bg-secondary);
      border: 1px solid var(--border-primary);
      border-radius: var(--radius-md);
      color: var(--text-primary);
      text-decoration: none;
      font-size: var(--font-size-sm);
      transition: all var(--transition-base);
    }

    .action-btn:hover {
      background: var(--color-accent);
      color: white;
      border-color: var(--color-accent);
      transform: translateY(-1px);
    }

    .action-btn .icon {
      font-size: var(--font-size-sm);
    }

    /* Full Width Content */
    .full-width-content {
      width: 100%;
    }

    /* Current Focus - Adjusted for main content */
    .current-focus {
      margin-bottom: var(--spacing-2xl);
    }

    .focus-card {
      background: var(--bg-card);
      border: 1px solid var(--border-primary);
      border-radius: var(--radius-lg);
      padding: var(--spacing-xl);
      position: relative;
      overflow: hidden;
    }

    .focus-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 3px;
      background: linear-gradient(90deg, var(--color-accent), var(--color-success));
    }

    .focus-header {
      display: flex;
      align-items: center;
      gap: var(--spacing-sm);
      margin-bottom: var(--spacing-md);
    }

    .status-indicator {
      display: flex;
      align-items: center;
      gap: var(--spacing-xs);
    }

    .pulse {
      width: 8px;
      height: 8px;
      background: var(--color-success);
      border-radius: 50%;
      animation: pulse 2s infinite;
    }

    @keyframes pulse {
      0%, 100% { opacity: 1; transform: scale(1); }
      50% { opacity: 0.7; transform: scale(1.1); }
    }

    .status-indicator .text {
      font-size: var(--font-size-sm);
      color: var(--text-secondary);
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }

    .focus-card h2 {
      margin: 0 0 var(--spacing-sm) 0;
      font-size: var(--font-size-xl);
      line-height: var(--line-height-tight);
    }

    .focus-card h2 a {
      color: var(--text-primary);
      text-decoration: none;
      transition: color var(--transition-base);
    }

    .focus-card h2 a:hover {
      color: var(--color-accent);
    }

    .focus-card p {
      color: var(--text-secondary);
      line-height: var(--line-height-relaxed);
      margin-bottom: var(--spacing-md);
    }

    .focus-meta {
      display: flex;
      gap: var(--spacing-md);
      align-items: center;
      font-size: var(--font-size-sm);
      color: var(--text-tertiary);
    }

    /* Content Sections Grid - Full Width */
    .content-sections {
      margin: var(--spacing-2xl) 0;
    }

    .section-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
      gap: var(--spacing-xl);
    }

    .content-section {
      background: var(--bg-card);
      border: 1px solid var(--border-primary);
      border-radius: var(--radius-lg);
      padding: var(--spacing-lg);
      transition: transform var(--transition-base), box-shadow var(--transition-base);
    }

    .content-section:hover {
      transform: translateY(-4px);
      box-shadow: var(--shadow-lg);
    }

    .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: var(--spacing-md);
      padding-bottom: var(--spacing-sm);
      border-bottom: 1px solid var(--border-primary);
    }

    .section-header h3 {
      margin: 0;
      font-size: var(--font-size-lg);
      color: var(--text-primary);
    }

    .section-link {
      color: var(--color-accent);
      text-decoration: none;
      font-size: var(--font-size-sm);
      font-weight: var(--font-weight-medium);
      transition: opacity var(--transition-base);
    }

    .section-link:hover {
      opacity: 0.8;
    }

    .section-preview {
      display: flex;
      flex-direction: column;
      gap: var(--spacing-md);
    }

    .preview-item {
      padding: var(--spacing-md) 0;
      border-bottom: 1px solid var(--border-secondary);
    }

    .preview-item:last-child {
      border-bottom: none;
      padding-bottom: 0;
    }

    .preview-item h4 {
      margin: 0 0 var(--spacing-xs) 0;
      font-size: var(--font-size-base);
      line-height: var(--line-height-tight);
    }

    .preview-item h4 a {
      color: var(--text-primary);
      text-decoration: none;
      transition: color var(--transition-base);
    }

    .preview-item h4 a:hover {
      color: var(--color-accent);
    }

    .preview-item p {
      margin: 0 0 var(--spacing-xs) 0;
      color: var(--text-secondary);
      font-size: var(--font-size-sm);
      line-height: var(--line-height-relaxed);
    }

    .preview-item time {
      font-size: var(--font-size-xs);
      color: var(--text-tertiary);
    }

    .project-status {
      display: inline-block;
      background: var(--color-success);
      color: white;
      padding: var(--spacing-xs) var(--spacing-sm);
      border-radius: var(--radius-sm);
      font-size: var(--font-size-xs);
      text-transform: uppercase;
      letter-spacing: 0.5px;
      margin-top: var(--spacing-xs);
    }

    /* Placeholder Content */
    .learning-placeholder,
    .tools-placeholder {
      text-align: center;
      padding: var(--spacing-lg) 0;
    }

    .learning-placeholder p,
    .tools-placeholder p {
      color: var(--text-secondary);
      margin-bottom: var(--spacing-md);
    }

    .cta-button {
      display: inline-block;
      background: var(--color-accent);
      color: white;
      padding: var(--spacing-sm) var(--spacing-md);
      border-radius: var(--radius-md);
      text-decoration: none;
      font-size: var(--font-size-sm);
      font-weight: var(--font-weight-medium);
      transition: background var(--transition-base);
    }

    .cta-button:hover {
      background: var(--color-accent-hover, var(--color-accent));
      opacity: 0.9;
    }

    /* Activity Feed - Progressive Loading */
    .activity-feed {
      margin: var(--spacing-2xl) 0;
    }

    .feed-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: var(--spacing-lg);
    }

    .feed-header h3 {
      margin: 0;
      font-size: var(--font-size-xl);
      color: var(--text-primary);
    }

    .load-more {
      background: var(--bg-secondary);
      border: 1px solid var(--border-primary);
      color: var(--text-primary);
      padding: var(--spacing-sm) var(--spacing-md);
      border-radius: var(--radius-md);
      cursor: pointer;
      font-size: var(--font-size-sm);
      transition: all var(--transition-base);
    }

    .load-more:hover {
      background: var(--color-accent);
      color: white;
      border-color: var(--color-accent);
    }

    .load-more:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }

    .feed-content {
      background: var(--bg-card);
      border: 1px solid var(--border-primary);
      border-radius: var(--radius-lg);
      padding: var(--spacing-lg);
    }

    .timeline-items {
      display: flex;
      flex-direction: column;
      gap: var(--spacing-lg);
    }

    .timeline-item {
      display: flex;
      gap: var(--spacing-md);
      align-items: flex-start;
    }

    .timeline-icon {
      flex-shrink: 0;
      width: 40px;
      height: 40px;
      background: var(--bg-secondary);
      border: 2px solid var(--border-primary);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: var(--font-size-lg);
    }

    .timeline-content h4 {
      margin: 0 0 var(--spacing-xs) 0;
      font-size: var(--font-size-base);
      color: var(--text-primary);
    }

    .timeline-content p {
      margin: 0 0 var(--spacing-xs) 0;
      color: var(--text-secondary);
      font-size: var(--font-size-sm);
    }

    .timeline-content time {
      font-size: var(--font-size-xs);
      color: var(--text-tertiary);
    }

    /* Responsive Design */
    @media (max-width: 1024px) {
      .integrated-layout {
        max-width: 1200px;
      }
      
      .header-content {
        gap: var(--spacing-lg);
      }
      
      .stats-row {
        gap: var(--spacing-md);
      }
    }

    @media (max-width: 768px) {
      .integrated-layout {
        padding: 0 var(--spacing-sm);
      }
      
      .integrated-header {
        margin: var(--spacing-lg) 0;
        padding: var(--spacing-lg);
      }
      
      .header-content {
        flex-direction: column;
        align-items: center;
        text-align: center;
        gap: var(--spacing-lg);
      }
      
      .profile-section {
        flex-direction: column;
        text-align: center;
        gap: var(--spacing-md);
      }
      
      .header-actions {
        align-items: center;
      }
      
      .contact-actions {
        justify-content: center;
      }
      
      .section-grid {
        grid-template-columns: 1fr;
        gap: var(--spacing-lg);
      }
      
      .feed-header {
        flex-direction: column;
        gap: var(--spacing-md);
        align-items: stretch;
      }
      
      .timeline-item {
        gap: var(--spacing-sm);
      }
      
      .timeline-icon {
        width: 32px;
        height: 32px;
        font-size: var(--font-size-base);
      }
    }

    @media (max-width: 480px) {
      .integrated-header {
        padding: var(--spacing-md);
      }
      
      .avatar {
        width: 60px;
        height: 60px;
      }
      
      .profile-info h1 {
        font-size: var(--font-size-xl);
      }
      
      .stats-row {
        gap: var(--spacing-sm);
      }
      
      .stat .number {
        font-size: var(--font-size-lg);
      }
      
      .contact-actions {
        flex-direction: column;
        width: 100%;
      }
      
      .action-btn {
        justify-content: center;
      }
    }
  </style>

  <activity-timeline></activity-timeline>
</BaseLayout>
