---
import { getCollection } from "astro:content";
import BlogCard from "../components/BlogCard.astro";
import BaseLayout from "../layouts/BaseLayout.astro";
import { 
  getFeaturedBlogPosts, 
  getFeaturedProjects, 
  getContentStats, 
  getAllTags,
  getAllSnippets,
  getAllTILPosts 
} from "../utils/content";

// Get all content for activity timeline
const blogPosts = await getCollection("blog");
const projects = await getCollection("projects");
const snippets = await getCollection("snippets");
const tilPosts = await getCollection("til");
const bookmarks = await getCollection("bookmarks");

// Create unified activity timeline
const allActivities = [
  ...blogPosts.map(post => ({
    type: 'blog',
    icon: 'üìù',
    title: post.data.title,
    description: post.data.description,
    date: post.data.pubDate,
    slug: post.slug,
    href: `/blog/${post.slug}`,
    category: post.slug.split('/')[0] || 'general'
  })),
  ...projects.map(project => ({
    type: 'project',
    icon: 'üöÄ',
    title: project.data.title,
    description: project.data.description,
    date: project.data.pubDate,
    slug: project.slug,
    href: `/projects/${project.slug}`,
    status: project.data.status
  })),
  ...snippets.map(snippet => ({
    type: 'snippet',
    icon: '‚ö°',
    title: snippet.data.title,
    description: snippet.data.description,
    date: snippet.data.pubDate,
    slug: snippet.slug,
    href: `/snippets/${snippet.slug}`,
    language: snippet.data.language
  })),
  ...tilPosts.map(til => ({
    type: 'til',
    icon: 'üí°',
    title: til.data.title,
    description: til.data.description,
    date: til.data.pubDate,
    slug: til.slug,
    href: `/til/${til.slug}`,
    category: til.data.category
  })),
  ...bookmarks.map(bookmark => ({
    type: 'bookmark',
    icon: 'üîñ',
    title: bookmark.data.title,
    description: bookmark.data.description,
    date: bookmark.data.pubDate,
    slug: bookmark.slug,
    href: `/bookmarks/${bookmark.slug}`,
    rating: bookmark.data.rating
  }))
];

// Sort by date (most recent first) and get recent activities
const recentActivities = allActivities
  .sort((a, b) => b.date.getTime() - a.date.getTime())
  .slice(0, 8);

// Get content stats
const contentStats = await getContentStats();
const popularTags = await getAllTags();
const topTags = popularTags.slice(0, 8);

// Calculate activity stats
const thisWeekStart = new Date();
thisWeekStart.setDate(thisWeekStart.getDate() - 7);
const thisWeekActivities = allActivities.filter(activity => activity.date >= thisWeekStart);
const thisMonthStart = new Date();
thisMonthStart.setMonth(thisMonthStart.getMonth() - 1);
const thisMonthActivities = allActivities.filter(activity => activity.date >= thisMonthStart);

// Current focus (most recent blog post or project)
const currentFocus = recentActivities[0];
---

<BaseLayout title="Home">
  <section class="hero">
    <img src="/avatar.jpg" alt="Jing Li Avatar" class="avatar" />
    <h1>Hi, I‚Äôm <strong>Jing Li</strong> üëã</h1>
    <p class="intro">
      Welcome to <strong>JLog</strong> ‚Äî my digital logbook where I share<br />
      what I <em>build</em>, what I <em>learn</em>, and what I <em>think</em>.
    </p>

    <p class="actions">
      ‚Üí <a href="/blog">Read the blog</a> „Éª
      <a href="/projects">See my projects</a> „Éª
      <a href="/snippets">Code snippets</a> „Éª
      <a href="/til">Today I learned</a>
    </p>
  </section>

  <!-- Current Focus -->
  {currentFocus && (
    <section class="current-focus">
      <h2>üéØ Currently Working On</h2>
      <div class="focus-card">
        <div class="focus-header">
          <span class="focus-icon">{currentFocus.icon}</span>
          <div class="focus-status">
            <span class="status-indicator active"></span>
            <span class="status-text">Recent Activity</span>
          </div>
        </div>
        <h3><a href={currentFocus.href}>{currentFocus.title}</a></h3>
        <p>{currentFocus.description}</p>
        <div class="focus-meta">
          <span class="activity-date">{currentFocus.date.toLocaleDateString()}</span>
          <span class="activity-type">{currentFocus.type}</span>
          {(currentFocus as any).category && <span class="activity-category">{(currentFocus as any).category}</span>}
        </div>
      </div>
    </section>
  )}

  <!-- Activity Stats -->
  <section class="activity-stats">
    <h2>üìä Activity Overview</h2>
    <div class="stats-grid">
      <div class="stat-item">
        <span class="stat-number">{allActivities.length}</span>
        <span class="stat-label">Total Activities</span>
      </div>
      <div class="stat-item">
        <span class="stat-number">{thisWeekActivities.length}</span>
        <span class="stat-label">This Week</span>
      </div>
      <div class="stat-item">
        <span class="stat-number">{thisMonthActivities.length}</span>
        <span class="stat-label">This Month</span>
      </div>
      <div class="stat-item">
        <span class="stat-number">{contentStats.blogPosts}</span>
        <span class="stat-label">Blog Posts</span>
      </div>
    </div>
  </section>

  <!-- Activity Timeline -->
  <section class="activity-timeline">
    <h2>üîÑ Recent Activity</h2>
    <div class="timeline">
      {recentActivities.map((activity) => (
        <div class={`activity-item ${activity.type}`}>
          <div class="activity-icon">{activity.icon}</div>
          <div class="activity-content">
            <div class="activity-header">
              <span class="activity-type">{activity.type}</span>
              <time class="activity-date">{activity.date.toLocaleDateString()}</time>
            </div>
            <h3><a href={activity.href}>{activity.title}</a></h3>
            <p>{activity.description}</p>
            <div class="activity-meta">
              {(activity as any).category && <span class="meta-tag">{(activity as any).category}</span>}
              {(activity as any).language && <span class="meta-tag">{(activity as any).language}</span>}
              {(activity as any).status && <span class="meta-tag">{(activity as any).status}</span>}
            </div>
          </div>
        </div>
      ))}
    </div>
  </section>

  <!-- Popular Tags -->
  <section class="popular-tags">
    <h2>üè∑Ô∏è Popular Topics</h2>
    <div class="tag-list">
      {topTags.map((tag) => (
        <a href={`/tags/${tag}`} class="tag">
          {tag}
        </a>
      ))}
    </div>
  </section>

  <style>
    .hero {
      text-align: center;
      padding: var(--spacing-2xl) var(--spacing-md) var(--spacing-xl);
      max-width: 720px;
      margin: 0 auto;
    }

    .avatar {
      width: 88px;
      height: 88px;
      border-radius: 50%;
      object-fit: cover;
      margin-bottom: var(--spacing-md);
      border: 2px solid var(--border-primary);
    }

    h1 {
      font-size: var(--font-size-2xl);
      margin-bottom: var(--spacing-sm);
      color: var(--text-primary);
    }

    .intro {
      font-size: var(--font-size-lg);
      color: var(--text-secondary);
      line-height: var(--line-height-relaxed);
      margin-bottom: var(--spacing-lg);
    }

    .actions {
      font-size: var(--font-size-base);
      color: var(--text-tertiary);
    }

    .actions a {
      color: var(--color-link);
      text-decoration: none;
    }

    .actions a:hover {
      color: var(--color-link-hover);
      text-decoration: underline;
    }

    /* Current Focus */
    .current-focus {
      max-width: 720px;
      margin: var(--spacing-2xl) auto;
      padding: 0 var(--spacing-md);
    }

    .current-focus h2 {
      font-size: var(--font-size-xl);
      margin-bottom: var(--spacing-md);
      color: var(--text-primary);
    }

    .focus-card {
      background: var(--bg-card);
      border: 1px solid var(--border-primary);
      border-radius: var(--radius-lg);
      padding: var(--spacing-lg);
      transition: transform var(--transition-base), box-shadow var(--transition-base);
    }

    .focus-card:hover {
      transform: translateY(-2px);
      box-shadow: var(--shadow-lg);
    }

    .focus-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: var(--spacing-md);
    }

    .focus-icon {
      font-size: var(--font-size-xl);
    }

    .focus-status {
      display: flex;
      align-items: center;
      gap: var(--spacing-xs);
    }

    .status-indicator {
      width: 8px;
      height: 8px;
      border-radius: 50%;
      background: var(--color-success);
    }

    .status-indicator.active {
      animation: pulse 2s infinite;
    }

    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }

    .status-text {
      font-size: var(--font-size-sm);
      color: var(--text-secondary);
    }

    .focus-card h3 {
      margin: 0 0 var(--spacing-sm) 0;
      font-size: var(--font-size-lg);
    }

    .focus-card h3 a {
      color: var(--text-primary);
      text-decoration: none;
    }

    .focus-card h3 a:hover {
      color: var(--color-accent);
    }

    .focus-card p {
      color: var(--text-secondary);
      line-height: var(--line-height-relaxed);
      margin-bottom: var(--spacing-md);
    }

    .focus-meta {
      display: flex;
      gap: var(--spacing-sm);
      flex-wrap: wrap;
    }

    .focus-meta span {
      background: var(--bg-secondary);
      color: var(--text-secondary);
      padding: var(--spacing-xs) var(--spacing-sm);
      border-radius: var(--radius-sm);
      font-size: var(--font-size-xs);
    }

    /* Activity Stats */
    .activity-stats {
      max-width: 720px;
      margin: var(--spacing-2xl) auto;
      padding: 0 var(--spacing-md);
    }

    .activity-stats h2 {
      font-size: var(--font-size-xl);
      margin-bottom: var(--spacing-md);
      color: var(--text-primary);
    }

    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
      gap: var(--spacing-md);
      text-align: center;
    }

    .stat-item {
      background: var(--bg-card);
      border: 1px solid var(--border-primary);
      padding: var(--spacing-lg) var(--spacing-md);
      border-radius: var(--radius-md);
      transition: transform var(--transition-base);
    }

    .stat-item:hover {
      transform: translateY(-2px);
    }

    .stat-number {
      display: block;
      font-size: var(--font-size-2xl);
      font-weight: var(--font-weight-bold);
      color: var(--color-accent);
      line-height: 1;
    }

    .stat-label {
      display: block;
      font-size: var(--font-size-sm);
      color: var(--text-secondary);
      margin-top: var(--spacing-xs);
    }

    /* Activity Timeline */
    .activity-timeline {
      max-width: 720px;
      margin: var(--spacing-2xl) auto;
      padding: 0 var(--spacing-md);
    }

    .activity-timeline h2 {
      font-size: var(--font-size-xl);
      margin-bottom: var(--spacing-lg);
      color: var(--text-primary);
    }

    .timeline {
      position: relative;
    }

    .timeline::before {
      content: '';
      position: absolute;
      left: 20px;
      top: 0;
      bottom: 0;
      width: 2px;
      background: var(--border-primary);
    }

    .activity-item {
      position: relative;
      display: flex;
      gap: var(--spacing-md);
      margin-bottom: var(--spacing-lg);
      padding-left: var(--spacing-xs);
    }

    .activity-icon {
      flex-shrink: 0;
      width: 40px;
      height: 40px;
      background: var(--bg-card);
      border: 2px solid var(--border-primary);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: var(--font-size-lg);
      position: relative;
      z-index: 1;
    }

    .activity-content {
      flex: 1;
      background: var(--bg-card);
      border: 1px solid var(--border-primary);
      border-radius: var(--radius-md);
      padding: var(--spacing-md);
      transition: transform var(--transition-base);
    }

    .activity-content:hover {
      transform: translateY(-1px);
    }

    .activity-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: var(--spacing-xs);
    }

    .activity-type {
      background: var(--color-accent);
      color: white;
      padding: var(--spacing-xs) var(--spacing-sm);
      border-radius: var(--radius-sm);
      font-size: var(--font-size-xs);
      text-transform: capitalize;
    }

    .activity-date {
      font-size: var(--font-size-xs);
      color: var(--text-tertiary);
    }

    .activity-content h3 {
      margin: 0 0 var(--spacing-xs) 0;
      font-size: var(--font-size-base);
    }

    .activity-content h3 a {
      color: var(--text-primary);
      text-decoration: none;
    }

    .activity-content h3 a:hover {
      color: var(--color-accent);
    }

    .activity-content p {
      color: var(--text-secondary);
      font-size: var(--font-size-sm);
      line-height: var(--line-height-relaxed);
      margin-bottom: var(--spacing-sm);
    }

    .activity-meta {
      display: flex;
      gap: var(--spacing-xs);
      flex-wrap: wrap;
    }

    .meta-tag {
      background: var(--bg-secondary);
      color: var(--text-secondary);
      padding: var(--spacing-xs) var(--spacing-sm);
      border-radius: var(--radius-sm);
      font-size: var(--font-size-xs);
      text-transform: capitalize;
    }

    /* Popular Tags */
    .popular-tags {
      max-width: 720px;
      margin: var(--spacing-2xl) auto;
      padding: 0 var(--spacing-md);
      text-align: center;
    }

    .popular-tags h2 {
      font-size: var(--font-size-xl);
      margin-bottom: var(--spacing-md);
      color: var(--text-primary);
    }

    .tag-list {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: var(--spacing-sm);
    }

    .tag {
      background: var(--bg-secondary);
      padding: var(--spacing-xs) var(--spacing-md);
      font-size: var(--font-size-sm);
      border-radius: var(--radius-full);
      text-decoration: none;
      color: var(--text-secondary);
      border: 1px solid var(--border-primary);
      transition: all var(--transition-base);
    }

    .tag:hover {
      background: var(--color-accent);
      color: white;
      border-color: var(--color-accent);
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .timeline::before {
        left: 15px;
      }
      
      .activity-icon {
        width: 30px;
        height: 30px;
        font-size: var(--font-size-base);
      }
      
      .activity-header {
        flex-direction: column;
        align-items: flex-start;
        gap: var(--spacing-xs);
      }
      
      .stats-grid {
        grid-template-columns: repeat(2, 1fr);
      }
    }
  </style>
</BaseLayout>
