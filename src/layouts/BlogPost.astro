---
import { calculateReadingTime, getRelatedPosts } from "../utils/content";

const { title, pubDate, updatedDate, tags, headings, prev, next, post, content } = Astro.props;

// Calculate reading time
const readingTime = calculateReadingTime(content || '');

// Get related posts
const relatedPosts = post ? await getRelatedPosts(post, 3) : [];
---

<div class="blog-layout">
  <!-- Left Sidebar TOC -->
  {
    headings.length > 0 && (
      <aside class="toc-sidebar">
        <div class="toc-sticky">
          <strong>Table of Contents</strong>
          <ul>
            {headings
              .filter((h: any) => h.depth <= 3)
              .map((h: any) => (
                <li class={`toc-item toc-depth-${h.depth}`}>
                  <a href={`#${h.slug}`}>{h.text}</a>
                </li>
              ))}
          </ul>
        </div>
      </aside>
    )
  }

  <!-- Main Content -->
  <article class="blog-post">
    <header>
      <h1>{title}</h1>
      <p class="meta">
        <time datetime={pubDate.toISOString()}>{pubDate.toDateString()}</time>
        {updatedDate && <span> · Updated {updatedDate.toDateString()}</span>}
        <span> · {readingTime.text}</span>
      </p>

      {
        tags?.length && (
          <ul class="tags">
            {tags.map((tag: string) => (
              <li>
                <a href={`/tags/${tag}`}>{tag}</a>
              </li>
            ))}
          </ul>
        )
      }
    </header>

    <section class="post-body">
      <slot />
    </section>
  </article>
</div>

<!-- Related Posts Section -->
{relatedPosts.length > 0 && (
  <section class="related-posts">
    <h2>Related Posts</h2>
    <div class="related-grid">
      {relatedPosts.map((relatedPost) => (
        <article class="related-card">
          <h3>
            <a href={`/blog/${relatedPost.slug}`}>{relatedPost.data.title}</a>
          </h3>
          <p>{relatedPost.data.description}</p>
          <div class="related-meta">
            <time>{relatedPost.data.pubDate.toDateString()}</time>
            {relatedPost.data.tags && (
              <div class="related-tags">
                {relatedPost.data.tags.slice(0, 2).map((tag: string) => (
                  <span class="tag">{tag}</span>
                ))}
              </div>
            )}
          </div>
        </article>
      ))}
    </div>
  </section>
)}

<footer class="post-footer">
  {
    prev && (
      <a href={`/blog/${prev.slug}`} class="nav-link">
        ← {prev.data.title}
      </a>
    )
  }
  {
    next && (
      <a href={`/blog/${next.slug}`} class="nav-link">
        Next: {next.data.title} →
      </a>
    )
  }
</footer>

<style>
  /* Blog Layout Container */
  .blog-layout {
    display: grid;
    grid-template-columns: 280px 1fr;
    gap: var(--spacing-2xl);
    max-width: 1400px;
    margin: 0 auto;
    padding: var(--spacing-2xl) var(--spacing-xl);
    min-height: 100vh;
  }

  /* Left Sidebar TOC */
  .toc-sidebar {
    position: relative;
  }

  .toc-sticky {
    position: fixed;
    top: 120px;
    left: calc((100vw - 1400px) / 2);
    width: 280px;
    padding: var(--spacing-lg);
    background: rgba(30, 41, 59, 0.9);
    border: 1px solid var(--border-primary);
    border-left: 3px solid var(--color-accent);
    border-radius: var(--radius-lg);
    backdrop-filter: blur(10px);
    box-shadow: var(--shadow-glow);
    height: fit-content;
    max-height: calc(100vh - 140px);
    overflow-y: auto;
    z-index: 10;
    scrollbar-width: thin;
    scrollbar-color: var(--color-accent) rgba(30, 41, 59, 0.3);
  }

  /* Custom Scrollbar for TOC */
  .toc-sticky::-webkit-scrollbar {
    width: 6px;
  }

  .toc-sticky::-webkit-scrollbar-track {
    background: rgba(30, 41, 59, 0.3);
    border-radius: var(--radius-sm);
  }

  .toc-sticky::-webkit-scrollbar-thumb {
    background: var(--color-accent);
    border-radius: var(--radius-sm);
    transition: background var(--transition-base);
  }

  .toc-sticky::-webkit-scrollbar-thumb:hover {
    background: var(--color-accent-hover);
  }

  .toc-sticky strong {
    display: block;
    color: var(--color-accent);
    font-family: var(--font-family-display);
    font-size: var(--font-size-sm);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-bottom: var(--spacing-md);
    padding-bottom: var(--spacing-sm);
    border-bottom: 1px solid var(--border-primary);
  }

  .toc-sticky ul {
    list-style: none;
    margin: 0;
    padding: 0;
  }

  .toc-item {
    margin: 0;
    line-height: 1.4;
  }

  .toc-depth-1 {
    margin: var(--spacing-sm) 0;
  }

  .toc-depth-2 {
    margin: var(--spacing-xs) 0;
    padding-left: var(--spacing-md);
  }

  .toc-depth-3 {
    margin: var(--spacing-xs) 0;
    padding-left: var(--spacing-lg);
  }

  .toc-item a {
    display: block;
    color: var(--text-secondary);
    text-decoration: none;
    padding: var(--spacing-xs) var(--spacing-sm);
    border-radius: var(--radius-sm);
    font-size: var(--font-size-sm);
    transition: all var(--transition-base);
    border-left: 2px solid transparent;
    word-wrap: break-word;
    overflow-wrap: break-word;
    hyphens: auto;
    line-height: 1.3;
  }

  .toc-item a:hover {
    color: var(--color-accent);
    background: rgba(96, 165, 250, 0.1);
    border-left-color: var(--color-accent);
  }

  .toc-item a.active {
    color: var(--color-accent);
    background: rgba(96, 165, 250, 0.15);
    border-left-color: var(--color-accent);
    font-weight: var(--font-weight-medium);
  }

  .blog-post {
    background: rgba(30, 41, 59, 0.9);
    border: 1px solid var(--border-primary);
    border-radius: var(--radius-xl);
    backdrop-filter: blur(10px);
    box-shadow: var(--shadow-glow);
    position: relative;
    overflow: hidden;
    padding: var(--spacing-2xl);
  }
  
  .blog-post::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: var(--bg-gradient);
    box-shadow: 0 0 10px var(--color-neon-cyan);
  }

  .blog-post h1 {
    font-family: var(--font-family-display);
    color: var(--text-heading);
    text-transform: uppercase;
    letter-spacing: 0.02em;
    text-shadow: 0 0 10px var(--color-neon-cyan);
    margin-bottom: var(--spacing-lg);
  }

  .meta {
    color: var(--text-secondary);
    font-size: var(--font-size-sm);
    font-family: var(--font-family-mono);
    margin-bottom: 1rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .tags {
    list-style: none;
    display: flex;
    gap: var(--spacing-sm);
    padding: 0;
    margin: 0 0 var(--spacing-xl);
  }

  .tags li {
    background: rgba(0, 245, 255, 0.1);
    padding: var(--spacing-xs) var(--spacing-sm);
    border-radius: var(--radius-sm);
    font-size: var(--font-size-xs);
    color: var(--color-neon-cyan);
    border: 1px solid var(--color-neon-cyan);
    font-family: var(--font-family-mono);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    box-shadow: 0 0 5px rgba(0, 245, 255, 0.3);
    transition: all var(--transition-base);
  }

  .tags li:hover {
    background: rgba(255, 0, 255, 0.1);
    border-color: var(--color-neon-pink);
    color: var(--color-neon-pink);
    box-shadow: 0 0 8px var(--color-neon-pink);
  }

  .post-body {
    line-height: 1.7;
    margin-top: 2rem;
  }

  .post-footer {
    display: flex;
    justify-content: space-between;
    margin-top: var(--spacing-2xl);
    gap: var(--spacing-md);
  }

  /* Mobile Responsive */
  @media (max-width: 1440px) {
    .toc-sticky {
      left: var(--spacing-md);
    }
  }

  @media (max-width: 1024px) {
    .blog-layout {
      grid-template-columns: 1fr;
      gap: var(--spacing-xl);
    }

    .toc-sidebar {
      order: -1;
    }

    .toc-sticky {
      position: static;
      left: auto;
      width: auto;
      max-height: none;
      margin-bottom: var(--spacing-xl);
    }
  }

  @media (max-width: 768px) {
    .blog-layout {
      padding: var(--spacing-lg) var(--spacing-md);
    }

    .blog-post {
      padding: var(--spacing-lg);
    }

    .post-footer {
      flex-direction: column;
      gap: var(--spacing-sm);
    }
  }
  .nav-link {
    color: var(--color-neon-cyan);
    font-weight: var(--font-weight-medium);
    font-family: var(--font-family-base);
    text-decoration: none;
    padding: var(--spacing-sm) var(--spacing-md);
    border: 2px solid var(--border-primary);
    border-radius: var(--radius-lg);
    background: rgba(22, 33, 62, 0.8);
    backdrop-filter: blur(10px);
    transition: all var(--transition-base);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    box-shadow: var(--shadow-sm);
  }

  .nav-link:hover {
    color: var(--color-neon-pink);
    border-color: var(--color-neon-pink);
    box-shadow: var(--shadow-glow-pink);
    text-shadow: 0 0 5px var(--color-neon-pink);
  }

  /* Related Posts Styles */
  .related-posts {
    grid-column: 1 / -1;
    margin: var(--spacing-2xl) 0;
  }

  .related-posts h2 {
    font-size: 1.5rem;
    margin-bottom: 1.5rem;
    color: var(--text-primary);
    text-align: center;
  }

  .related-grid {
    display: grid;
    gap: 1.5rem;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  }

  .related-card {
    background: rgba(22, 33, 62, 0.8);
    padding: var(--spacing-lg);
    border-radius: var(--radius-lg);
    border: 2px solid var(--border-primary);
    backdrop-filter: blur(10px);
    box-shadow: var(--shadow-sm);
    transition: all var(--transition-base);
    position: relative;
    overflow: hidden;
  }

  .related-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: var(--bg-gradient);
    transform: scaleX(0);
    transition: transform var(--transition-base);
    box-shadow: 0 0 10px var(--color-neon-cyan);
  }

  .related-card:hover {
    transform: translateY(-4px);
    box-shadow: var(--shadow-glow-pink);
    border-color: var(--color-neon-pink);
  }

  .related-card:hover::before {
    transform: scaleX(1);
  }

  .related-card h3 {
    margin: 0 0 0.75rem 0;
    font-size: 1.1rem;
  }

  .related-card h3 a {
    color: var(--text-primary);
    text-decoration: none;
  }

  .related-card h3 a:hover {
    color: var(--color-accent);
  }

  .related-card p {
    color: var(--text-secondary);
    font-size: 0.9rem;
    line-height: 1.5;
    margin-bottom: 1rem;
  }

  .related-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 0.8rem;
    color: var(--text-muted);
  }

  .related-tags {
    display: flex;
    gap: 0.25rem;
  }

  .related-tags .tag {
    background: var(--tag-bg);
    color: var(--tag-color);
    padding: 0.2rem 0.4rem;
    border-radius: var(--radius-sm);
    font-size: 0.7rem;
  }
</style>

<script>
  // Table of Contents Active Section Tracking
  document.addEventListener('DOMContentLoaded', () => {
    const tocLinks = document.querySelectorAll('.toc-item a');
    const headings = document.querySelectorAll('h1[id], h2[id], h3[id], h4[id], h5[id], h6[id]');
    
    if (!tocLinks.length || !headings.length) return;

    // Create intersection observer to track visible headings
    const observerOptions = {
      root: null,
      rootMargin: '-20% 0px -70% 0px',
      threshold: 0
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        const id = entry.target.getAttribute('id');
        const tocLink = document.querySelector(`.toc-item a[href="#${id}"]`);
        
        if (entry.isIntersecting) {
          // Remove active class from all TOC links
          tocLinks.forEach(link => link.classList.remove('active'));
          // Add active class to current section
          if (tocLink) {
            tocLink.classList.add('active');
          }
        }
      });
    }, observerOptions);

    // Observe all headings
    headings.forEach((heading) => {
      observer.observe(heading);
    });

    // Smooth scroll for TOC links
    tocLinks.forEach((link) => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const href = link.getAttribute('href');
        if (!href) return;
        
        const targetId = href.substring(1);
        const targetElement = document.getElementById(targetId);
        
        if (targetElement) {
          const headerHeight = 120; // Account for fixed header
          const targetPosition = targetElement.offsetTop - headerHeight;
          
          window.scrollTo({
            top: targetPosition,
            behavior: 'smooth'
          });
        }
      });
    });

    // Set initial active state
    const firstHeading = headings[0];
    if (firstHeading) {
      const firstId = firstHeading.getAttribute('id');
      const firstTocLink = document.querySelector(`.toc-item a[href="#${firstId}"]`);
      if (firstTocLink) {
        firstTocLink.classList.add('active');
      }
    }
  });
</script>
